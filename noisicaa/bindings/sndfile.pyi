# @begin:license
#
# Copyright (c) 2015-2019, Benjamin Niemann <pink@odahoda.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# @end:license

import enum
import numpy
import types
from typing import Type


class Error(Exception):
    pass


class FileFormat(enum.Enum):
    WAV = ...
    AIFF = ...
    AU = ...
    RAW = ...
    PAF = ...
    SVX = ...
    NIST = ...
    VOC = ...
    IRCAM = ...
    W64 = ...
    MAT4 = ...
    MAT5 = ...
    PVF = ...
    XI = ...
    HTK = ...
    SDS = ...
    AVR = ...
    WAVEX = ...
    SD2 = ...
    FLAC = ...
    CAF = ...
    WVE = ...
    OGG = ...
    MPC2K = ...
    RF64 = ...


class Encoding(enum.Enum):
    PCM_S8 = ...
    PCM_16 = ...
    PCM_24 = ...
    PCM_32 = ...
    PCM_U8 = ...
    FLOAT = ...
    DOUBLE = ...
    ULAW = ...
    ALAW = ...
    IMA_ADPCM = ...
    MS_ADPCM = ...
    GSM610 = ...
    VOX_ADPCM = ...
    G721_32 = ...
    G723_24 = ...
    G723_40 = ...
    DWVW_12 = ...
    DWVW_16 = ...
    DWVW_24 = ...
    DWVW_N = ...
    DPCM_8 = ...
    DPCM_16 = ...
    VORBIS = ...


class SndFile(object):
    path = ...  # type: str

    def __init__(self, path: str) -> None: ...
    def __enter__(self) -> 'SndFile': ...
    def __exit__(
            self, exc_type: Type[Exception], exc_val: Exception, exc_tb: types.TracebackType
    ) -> bool: ...
    def close(self) -> None: ...
    @property
    def num_samples(self) -> int: ...
    @property
    def sample_rate(self) -> int: ...
    @property
    def num_channels(self) -> int: ...
    @property
    def file_format(self) -> FileFormat: ...
    @property
    def encoding(self) -> Encoding: ...
    def get_samples(self) -> memoryview: ...
    def read_samples(self, num_samples: int) -> numpy.ndarray: ...
