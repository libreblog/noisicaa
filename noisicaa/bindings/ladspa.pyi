# @begin:license
#
# Copyright (c) 2015-2018, Benjamin Niemann <pink@odahoda.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# @end:license

from enum import Enum
from typing import Union, List

class Error(Exception): pass

class PortDirection(Enum):
    Input = ...
    Output = ...

class PortType(Enum):
    Audio = ...
    Control = ...

class Port(object):
    def __str__(self) -> str: ...
    @property
    def index(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def direction(self) -> PortDirection: ...
    @property
    def type(self) -> PortType: ...
    @property
    def is_bounded(self) -> bool: ...
    def lower_bound(self, sample_rate: int) -> Union[int, float, None]: ...
    def upper_bound(self, sample_rate: int) -> Union[int, float, None]: ...
    def default(self, sample_rate: int) -> Union[int, float, None]: ...
    def weighted_mean(self, sample_rate: int, w1: float, w2: float) -> float: ...
    @property
    def is_sample_rate(self) -> bool: ...
    @property
    def is_logarithmic(self) -> bool: ...
    @property
    def is_integer(self) -> bool: ...

class Descriptor(object):
    ports = ...  # type: List[Port]

    @property
    def id(self) -> int: ...
    @property
    def label(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def maker(self) -> str: ...
    @property
    def copyright(self) -> str: ...

class Library(object):
    descriptors = ...  # type: List[Descriptor]

    def __init__(self, path: str) -> None: ...
    def get_descriptor(self, label: str) -> Descriptor: ...
