/*
 * @begin:license
 *
 * Copyright (c) 2015-2019, Benjamin Niemann <pink@odahoda.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * @end:license
 */

syntax = "proto2";

package noisicaa.pb;

import "noisicaa/audioproc/public/plugin_state.proto";
import "noisicaa/model/model_base.proto";

message Track {
  optional bool visible = 1;
  optional uint32 list_position = 2;
}

message Measure {
  optional TimeSignature time_signature = 1;
}

message MeasureReference {
  optional uint64 measure = 1;
}

message MeasuredTrack {
  repeated uint64 measure_list = 1;
  repeated uint64 measure_heap = 2;
}

message BaseNode {
  optional string name = 1;
  optional Pos2F graph_pos = 2;
  optional SizeF graph_size = 5;
  optional Color graph_color = 6;
  repeated ControlValue control_values = 3;
  optional PluginState plugin_state = 4;
}

message Node {
  optional string node_uri = 1;
}

message SystemOutNode {
}

message NodeConnection {
  optional uint64 source_node = 1;
  optional string source_port = 2;
  optional uint64 dest_node = 3;
  optional string dest_port = 4;
}

message Sample {
  optional string path = 1;
}

message Metadata {
  optional string author = 1;
  optional string license = 2;
  optional string copyright = 3;
  optional uint32 created = 4;
}

message Project {
  optional uint64 metadata = 1;
  optional uint32 bpm = 2;
  repeated uint64 nodes = 3;
  repeated uint64 node_connections = 4;
  repeated uint64 samples = 5;
}

extend ObjectBase {
  // Project (1xxxxx)
  optional Project project = 100000;
  optional Metadata metadata = 100001;

  // Samples (2xxxxx)
  optional Sample sample = 200000;

  // Pipeline graph (3xxxxx)
  optional NodeConnection node_connection = 300000;

  optional BaseNode base_node = 301000;
  optional Node node = 302000;
  optional SystemOutNode system_out_node = 303000;

  // Tracks (400xxx)
  optional Track track = 400000;
  optional MeasuredTrack measured_track = 400100;
  optional Measure measure = 400101;
  optional MeasureReference measure_reference = 400102;
}

message Pitch {
  optional string name = 1;
}

message KeySignature {
  optional string name = 1;
}

message TimeSignature {
  optional uint32 upper = 1;
  optional uint32 lower = 2;
}

message Clef {
  enum Type {
    FrenchViolin = 1;
    Treble = 2;
    Soprano = 3;
    MezzoSoprano = 4;
    Alto = 5;
    Tenor = 6;
    Baritone = 7;
    Bass = 8;
    Subbass = 9;
  }

  optional Type type = 1;
}

message Pos2F {
  required float x = 1;
  required float y = 2;
}

message SizeF {
  required float width = 1;
  required float height = 2;
}

message Color {
  required float r = 1;
  required float g = 2;
  required float b = 3;
  required float a = 4 [default=1.0];
}

message ControlValue {
  optional string name = 1;
  optional float value = 2;
  optional uint64 generation = 3;
}

message Fraction {
  optional int64 numerator = 1;
  optional int64 denominator = 2;
}
