/*
 * @begin:license
 *
 * Copyright (c) 2015-2018, Benjamin Niemann <pink@odahoda.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * @end:license
 */

syntax = "proto2";

import "noisicaa/audioproc/public/plugin_state.proto";
import "noisicaa/model/model_base.proto";
import "noisicaa/model/project.proto";
import "noisicaa/music/mutations.proto";

package noisicaa.pb;

message UpdateProjectProperties {
  optional uint32 bpm = 1;
}

message InsertMeasure {
  repeated uint64 tracks = 1;
  optional int32 pos = 2;
}

message RemoveMeasure {
  repeated uint64 tracks = 1;
  optional int32 pos = 2;
}

message UpdateTrackProperties {
  optional int32 transpose_octaves = 1;
}

message SetNumMeasures {
  optional uint32 num_measures = 1;
}

message ClearMeasures {
  repeated uint64 measure_ids = 1;
}

message PasteMeasures {
  optional string mode = 1;
  repeated ObjectTree src_objs = 2;
  repeated uint64 target_ids = 3;
}

message UpdateTrack {
  optional bool visible = 1;
  optional uint32 list_position = 2;
}

message AddPipelineGraphNode {
  optional string uri = 1;
  optional string name = 2;
  optional Pos2F graph_pos = 3;
  optional SizeF graph_size = 4;
  optional Color graph_color = 5;
}

message RemovePipelineGraphNode {
  optional uint64 node_id = 1;
}

message AddPipelineGraphConnection {
  optional uint64 source_node_id = 1;
  optional string source_port_name = 2;
  optional uint64 dest_node_id = 3;
  optional string dest_port_name = 4;
}

message RemovePipelineGraphConnection {
  optional uint64 connection_id = 1;
}

message SetTimeSignature {
  repeated uint64 measure_ids = 1;
  optional uint32 upper = 2;
  optional uint32 lower = 3;
}

message ChangePipelineGraphNode {
  optional Pos2F graph_pos = 1;
  optional SizeF graph_size = 2;
  optional Color graph_color = 4;
  optional string name = 3;
}

message SetPipelineGraphControlValue {
  optional string port_name = 1;
  optional float float_value = 2;
  optional int32 generation = 3;
}

message SetPipelineGraphPluginState {
  optional PluginState plugin_state = 1;
}

message PipelineGraphNodeToPreset {
}

message PipelineGraphNodeFromPreset {
  optional bytes preset = 1;
}

message Command {
  optional uint64 target = 1;

  required string command = 2;

  optional UpdateProjectProperties update_project_properties = 100;
  optional InsertMeasure insert_measure = 103;
  optional RemoveMeasure remove_measure = 104;
  optional UpdateTrackProperties update_track_properties = 107;
  optional SetNumMeasures set_num_measures = 108;
  optional ClearMeasures clear_measures = 109;
  optional PasteMeasures paste_measures = 110;
  optional AddPipelineGraphNode add_pipeline_graph_node = 111;
  optional RemovePipelineGraphNode remove_pipeline_graph_node = 112;
  optional AddPipelineGraphConnection add_pipeline_graph_connection = 113;
  optional RemovePipelineGraphConnection remove_pipeline_graph_connection = 114;
  optional SetTimeSignature set_time_signature = 115;
  optional ChangePipelineGraphNode change_pipeline_graph_node = 138;
  optional SetPipelineGraphControlValue set_pipeline_graph_control_value = 139;
  optional SetPipelineGraphPluginState set_pipeline_graph_plugin_state = 140;
  optional PipelineGraphNodeToPreset pipeline_graph_node_to_preset = 141;
  optional PipelineGraphNodeFromPreset pipeline_graph_node_from_preset = 142;
  optional UpdateTrack update_track = 143;

  extensions 100000 to max;
}

message ExecutedCommand {
  optional Command command = 1;

  enum Status {
    NOT_APPLIED = 1;
    APPLIED = 2;
    FAILED = 3;
  }
  optional Status status = 2;
  optional MutationList log = 3;

  optional uint32 version = 4;
  optional uint64 create_timestamp = 5;
}
