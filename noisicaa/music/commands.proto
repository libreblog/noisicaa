/*
 * @begin:license
 *
 * Copyright (c) 2015-2019, Benjamin Niemann <pink@odahoda.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * @end:license
 */

syntax = "proto2";

import "noisicaa/core/empty_message.proto";
import "noisicaa/value_types/value_types.proto";
import "noisicaa/audioproc/public/control_value.proto";
import "noisicaa/audioproc/public/node_port_properties.proto";
import "noisicaa/audioproc/public/plugin_state.proto";
import "noisicaa/node_db/node_description.proto";
import "noisicaa/model_base/model_base.proto";
import "noisicaa/music/model.proto";
import "noisicaa/music/mutations.proto";

package noisicaa.pb;

message UpdateTrack {
  required uint64 track_id = 1;
  optional bool set_visible = 2;
  optional uint32 set_list_position = 3;
}

message UpdateMeasuredTrack {
  required uint64 track_id = 1;
}

message CreateMeasure {
  required uint64 track_id = 1;
  optional int32 pos = 2;
}

message UpdateMeasure {
  required uint64 measure_id = 1;

  optional bool clear = 2;
  optional TimeSignature set_time_signature = 3;
}

message DeleteMeasure {
  required uint64 measure_id = 1;
}

message PasteMeasures {
  optional string mode = 1;
  repeated ObjectTree src_objs = 2;
  repeated uint64 target_ids = 3;
}

message Command {
  required string command = 1;

  // Tracks (400xxx)
  optional UpdateTrack update_track = 400000;

  optional UpdateMeasuredTrack update_measured_track = 400100;
  optional CreateMeasure create_measure = 400200;
  optional UpdateMeasure update_measure = 400201;
  optional DeleteMeasure delete_measure = 400202;
  optional PasteMeasures paste_measures = 400203;

  extensions 401000 to max;
}

message CommandSequence {
  repeated Command commands = 1;
}

message ExecutedCommand {
  repeated Command commands = 1;

  enum Status {
    NOT_APPLIED = 1;
    APPLIED = 2;
    FAILED = 3;
  }
  optional Status status = 2;
  optional MutationList log = 3;

  optional uint32 version = 4;
  optional uint64 create_timestamp = 5;
}
