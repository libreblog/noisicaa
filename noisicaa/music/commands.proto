/*
 * @begin:license
 *
 * Copyright (c) 2015-2018, Benjamin Niemann <pink@odahoda.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * @end:license
 */

syntax = "proto2";

import "noisicaa/audioproc/public/musical_time.proto";
import "noisicaa/audioproc/public/plugin_state.proto";
import "noisicaa/model/model_base.proto";
import "noisicaa/model/project.proto";
import "noisicaa/music/mutations.proto";

package noisicaa.pb;

message UpdateProjectProperties {
  optional uint32 bpm = 1;
}

message InsertMeasure {
  repeated uint64 tracks = 1;
  optional int32 pos = 2;
}

message RemoveMeasure {
  repeated uint64 tracks = 1;
  optional int32 pos = 2;
}

message UpdateTrackProperties {
  optional int32 transpose_octaves = 1;
}

message SetNumMeasures {
  optional uint32 num_measures = 1;
}

message ClearMeasures {
  repeated uint64 measure_ids = 1;
}

message PasteMeasures {
  optional string mode = 1;
  repeated ObjectTree src_objs = 2;
  repeated uint64 target_ids = 3;
}

message UpdateTrack {
  optional bool visible = 1;
  optional uint32 list_position = 2;
}

message AddPipelineGraphNode {
  optional string uri = 1;
  optional string name = 2;
  optional Pos2F graph_pos = 3;
  optional SizeF graph_size = 4;
  optional Color graph_color = 5;
}

message RemovePipelineGraphNode {
  optional uint64 node_id = 1;
}

message AddPipelineGraphConnection {
  optional uint64 source_node_id = 1;
  optional string source_port_name = 2;
  optional uint64 dest_node_id = 3;
  optional string dest_port_name = 4;
}

message RemovePipelineGraphConnection {
  optional uint64 connection_id = 1;
}

message UpdateInstrument {
  optional string instrument_uri = 1;
}

message SetTimeSignature {
  repeated uint64 measure_ids = 1;
  optional uint32 upper = 2;
  optional uint32 lower = 3;
}

message SetInstrument {
  optional string instrument = 1;
}

message ChangeNote {
  optional uint32 idx = 1;
  optional string pitch = 2;
  optional MusicalDuration duration = 3;
  optional uint32 dots = 4;
  optional uint32 tuplet = 5;
}

message InsertNote {
  optional uint32 idx = 1;
  optional string pitch = 2;
  optional MusicalDuration duration = 3;
}

message DeleteNote {
  optional uint32 idx = 1;
}

message AddPitch {
  optional uint32 idx = 1;
  optional string pitch = 2;
}

message RemovePitch {
  optional uint32 idx = 1;
  optional uint32 pitch_idx = 2;
}

message SetClef {
  repeated uint64 measure_ids = 1;
  optional Clef clef = 2;
}

message SetKeySignature {
  repeated uint64 measure_ids = 1;
  optional KeySignature key_signature = 2;
}

message SetAccidental {
  optional uint32 idx = 1;
  optional uint32 pitch_idx = 2;
  optional string accidental = 3;
}

message TransposeNotes {
  repeated uint64 note_ids = 1;
  optional int32 half_notes = 2;
}

message AddControlPoint {
  optional MusicalTime time = 1;
  optional float value = 2;
}

message RemoveControlPoint {
  optional uint64 point_id = 1;
}

message MoveControlPoint {
  optional uint64 point_id = 1;
  optional MusicalTime time = 2;
  optional float value = 3;
}

message AddSample {
  optional MusicalTime time = 1;
  optional string path = 2;
}

message RemoveSample {
  optional uint64 sample_id = 1;
}

message MoveSample {
  optional uint64 sample_id = 1;
  optional MusicalTime time = 2;
}

message RenderSample {
  optional Fraction scale_x = 1;
}

message SetBeatTrackInstrument {
  optional string instrument = 1;
}

message SetBeatTrackPitch {
  optional Pitch pitch = 1;
}

message SetBeatVelocity {
  optional uint32 velocity = 1;
}

message AddBeat {
  optional MusicalDuration time = 1;
}

message RemoveBeat {
  optional uint64 beat_id = 1;
}

message ChangePipelineGraphNode {
  optional Pos2F graph_pos = 1;
  optional SizeF graph_size = 2;
  optional Color graph_color = 4;
  optional string name = 3;
}

message SetPipelineGraphControlValue {
  optional string port_name = 1;
  optional float float_value = 2;
  optional int32 generation = 3;
}

message SetPipelineGraphPluginState {
  optional PluginState plugin_state = 1;
}

message PipelineGraphNodeToPreset {
}

message PipelineGraphNodeFromPreset {
  optional bytes preset = 1;
}

message Command {
  optional uint64 target = 1;

  oneof command {
    UpdateProjectProperties update_project_properties = 100;
    InsertMeasure insert_measure = 103;
    RemoveMeasure remove_measure = 104;
    UpdateTrackProperties update_track_properties = 107;
    SetNumMeasures set_num_measures = 108;
    ClearMeasures clear_measures = 109;
    PasteMeasures paste_measures = 110;
    AddPipelineGraphNode add_pipeline_graph_node = 111;
    RemovePipelineGraphNode remove_pipeline_graph_node = 112;
    AddPipelineGraphConnection add_pipeline_graph_connection = 113;
    RemovePipelineGraphConnection remove_pipeline_graph_connection = 114;
    SetTimeSignature set_time_signature = 115;
    ChangeNote change_note = 117;
    InsertNote insert_note = 118;
    DeleteNote delete_note = 119;
    AddPitch add_pitch = 120;
    RemovePitch remove_pitch = 121;
    SetClef set_clef = 122;
    SetKeySignature set_key_signature = 123;
    SetAccidental set_accidental = 124;
    TransposeNotes transpose_notes = 125;
    AddControlPoint add_control_point = 126;
    RemoveControlPoint remove_control_point = 127;
    MoveControlPoint move_control_point = 128;
    AddSample add_sample = 129;
    RemoveSample remove_sample = 130;
    MoveSample move_sample = 131;
    RenderSample render_sample = 132;
    SetBeatTrackPitch set_beat_track_pitch = 134;
    SetBeatVelocity set_beat_velocity = 135;
    AddBeat add_beat = 136;
    RemoveBeat remove_beat = 137;
    ChangePipelineGraphNode change_pipeline_graph_node = 138;
    SetPipelineGraphControlValue set_pipeline_graph_control_value = 139;
    SetPipelineGraphPluginState set_pipeline_graph_plugin_state = 140;
    PipelineGraphNodeToPreset pipeline_graph_node_to_preset = 141;
    PipelineGraphNodeFromPreset pipeline_graph_node_from_preset = 142;
    UpdateTrack update_track = 143;
    UpdateInstrument update_instrument = 144;
  }
}

message ExecutedCommand {
  optional Command command = 1;

  enum Status {
    NOT_APPLIED = 1;
    APPLIED = 2;
    FAILED = 3;
  }
  optional Status status = 2;
  optional MutationList log = 3;

  optional uint32 version = 4;
  optional uint64 create_timestamp = 5;
}
