/*
 * @begin:license
 *
 * Copyright (c) 2015-2019, Benjamin Niemann <pink@odahoda.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * @end:license
 */

syntax = "proto2";

package noisicaa.pb;

message NotSupportedReasons {
  repeated string unsupported_lv2_feature = 1;
  repeated string unsupported_lv2_ui_type = 2;
}

message ProcessorDescription {
  required string type = 1;
}

message LV2Feature {
  required string uri = 1;
  required bool required = 2;
}

message LV2Description {
  required string uri = 1;

  message UI {
    required bool supported = 1;
    optional NotSupportedReasons not_supported_reasons = 2;

    required string uri = 3;
    optional string type_uri = 4;
    optional string bundle_path = 5;
    optional string binary_path = 6;
    repeated LV2Feature features = 7;
  }

  repeated UI uis = 2;
  optional string ui_uri = 3;

  repeated LV2Feature features = 4;
}

message LadspaDescription {
  required string library_path = 1;
  required string label = 2;
}

message CSoundDescription {
  required string orchestra = 1;
  required string score = 2;
}

message SoundFileDescription {
  required string sound_file_path = 1;
}

message PluginDescription {
  enum Type {
    LV2 = 1;
    LADSPA = 2;
  }
  required Type type = 1;
}

message FloatValueDescription {
  optional float default = 1;
  optional float min = 2;
  optional float max = 3;
}

message PortDescription {
  enum Direction {
    INPUT = 1;
    OUTPUT = 2;
  }
  required Direction direction = 1;

  enum Type {
    UNSUPPORTED = -1;
    AUDIO = 1;
    ARATE_CONTROL = 2;
    KRATE_CONTROL = 3;
    EVENTS = 4;
  }
  required Type type = 2;

  required string name = 3;
  optional string display_name = 4;

  optional FloatValueDescription float_value = 5;
  optional string csound_name = 6;
  optional string drywet_port = 7;
  optional float drywet_default = 8;
  optional string bypass_port = 9;
}

message NodeUIDescription {
  required string type = 1 [default = "builtin://no-ui"];
  optional bool muteable = 2 [default = true];
}

message NodeDescription {
  required string uri = 1;

  optional bool supported = 2 [default = true];
  optional NotSupportedReasons not_supported_reasons = 3;

  enum Type {
    OTHER = 1;
    PROCESSOR = 2;
    PLUGIN = 3;
    REALM_SOURCE = 6;
    REALM_SINK = 4;
    CHILD_REALM = 5;
  }
  required Type type = 4;

  optional string display_name = 5;
  optional bool internal = 6 [default = false];

  optional bool has_ui = 7 [default = false];

  repeated PortDescription ports = 8;

  optional NodeUIDescription node_ui = 9;

  optional ProcessorDescription processor = 100;

  // Processor types
  optional CSoundDescription csound = 200;
  optional SoundFileDescription sound_file = 203;
  optional PluginDescription plugin = 204;

  // Plugin types
  optional LV2Description lv2 = 300;
  optional LadspaDescription ladspa = 301;
}
